@page "/"

<PageTitle>
    ZhouyiStore Editor
</PageTitle>

<h1>ZhouyiStore Editor</h1>

<ConfirmCloseDialog @ref="confirmDialog" />

<div id="tool-bar">
    <label id="tool-bar-new-store" @onclick="NewStore">
        New Store
    </label>

    <InputFile 
        id="tool-bar-open-store-input-file" 
        OnChange="OpenStore"
        hidden="hidden" 
        accept=".json" />
    <label id="tool-bar-open-store" for="tool-bar-open-store-input-file" >
        Open Store
    </label>

    <label id="tool-bar-export-store" @onclick="CloseStore">
        Close Store
    </label>

    <label id="tool-bar-export-store" @onclick="ExportStore">
        Export Store
    </label>
</div>

<PromptBar @ref="promptBar" />

@if (StoreManager.Store is null)
{
    <div>
        Open a ZhouyiStore file or create a new one.
    </div>
    <button @onclick="TryRestoreStore">
        Try to restore the last edited store. (NOT RELIABLE)
    </button>
}
else
{
    <EditorMain Store="@StoreManager.Store" />
}

@inject ILogger<Main> Logger
@inject FileService FileService
@inject StoreManager StoreManager

@code
{
    private PromptBar promptBar;
    private ConfirmCloseDialog confirmDialog;

    async Task TryRestoreStore()
    {
        if (await StoreManager.TryLoadFromLocalStorage())
            promptBar.ShowInformation("Loaded the last edited store.");
        else
            promptBar.ShowWarning("Failed to loaded the last edited store.");
    }

    void NewStore()
    {
        void ContinueNew()
        {
            StoreManager.NewStore();
            promptBar.ShowInformation("Store created.");
            this.StateHasChanged();
        }

        if (StoreManager.Store is not null)
        {
            confirmDialog.OnContinueSelected = new EventCallback(this, ContinueNew);
            confirmDialog.Display();
        }
        else
        {
            ContinueNew();
        }
    }

    async Task OpenStore(InputFileChangeEventArgs e)
    {
        async Task ContinueOpen()
        {
            promptBar.ShowInformation("Loading store file...");
            if (await StoreManager.OpenStore(e.File))
            {
                promptBar.ShowInformation("Store file loaded successfully.");
                this.StateHasChanged();
            }
            else
                promptBar.ShowError("Failed to load the store file. Was it corrupted or too large?");
        }

        if(StoreManager.Store is not null)
        {
            confirmDialog.OnContinueSelected = new EventCallback(this, ContinueOpen);
            confirmDialog.Display();
        }
        else
        {
            await ContinueOpen();
        }
    }

    async Task ExportStore()
    {
        promptBar.ShowInformation($"Generating file content...");
        using var stream = await StoreManager.ExportStoreAsStream();
        promptBar.ShowInformation($"Content generated.");
        await FileService.Download(stream, "store.json");
    }

    void CloseStore()
    {
        void ContinueClose()
        {
            StoreManager.CloseStore();
            promptBar.ShowInformation($"Store closed.");
            this.StateHasChanged();
        }

        if (StoreManager.Store is not null)
        {
            confirmDialog.OnContinueSelected = new EventCallback(this, ContinueClose);
            confirmDialog.Display();
        }
        else
        {
            ContinueClose();
        }
    }
}